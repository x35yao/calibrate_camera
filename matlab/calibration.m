% Auto-generated by stereoCalibrator app on 20-Oct-2022
%-------------------------------------------------------
clear;
clc;
% Define images to process
date = '2024-03-22';
base_dir = sprintf('/home/luke/Desktop/project/calibrate_camera/data/%s/selected_images/', date);


path_left = strcat(base_dir, '/left');
original_files_left=dir([path_left '/*.jpeg']);

path_right = strcat(base_dir, '/right');
original_files_right=dir([path_right '/*.jpeg']);

imageFileNames1 = {};
imageFileNames2 = {};
for k=1:length(original_files_left)
   filename=[path_left '/' original_files_left(k).name];
   imageFileNames1{end + 1} = filename;
end
for k=1:length(original_files_right)
   filename=[path_right '/' original_files_right(k).name];
   imageFileNames2{end + 1} = filename;
end

% Detect calibration pattern in images
detector = vision.calibration.stereo.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames1, imageFileNames2);

% Generate world coordinates for the planar patten keypoints
% squareSize = 2.350000e+01;  % in units of 'millimeters'
squareSize = 5.0000000e+01;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Read one of the images from the first stereo pair
I1 = imread(imageFileNames1{1});
[mrows, ncols, ~] = size(I1);

% Calibrate the camera
stereoParams = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols])

[cameraMatrix1,distCoeffs1,cameraMatrix2, distCoeffs2,rot, trans] = stereoParametersToOpenCV(stereoParams);
fundamentalMatrix = stereoParams.FundamentalMatrix;
essentialMatrix = stereoParams.EssentialMatrix;
fname = sprintf("/home/luke/Desktop/project/calibrate_camera/matlab/%s/stereoParams", date)
foldername = sprintf("/home/luke/Desktop/project/calibrate_camera/matlab/%s", date)
mkdir(foldername);
save(fname, 'cameraMatrix1', 'distCoeffs1', 'cameraMatrix2', 'distCoeffs2', 'rot', 'trans', 'fundamentalMatrix', 'essentialMatrix');


% View reprojection errors
h1=figure; showReprojectionErrors(stereoParams);

% Visualize pattern locations
h2=figure; showExtrinsics(stereoParams, 'CameraCentric');

% Display parameter estimation errors
% displayErrors(stereoParams.MeanReprojectionError, stereoParams);

% % You can use the calibration data to rectify stereo images.
% I2 = imread(imageFileNames2{1});
% [J1, J2, reprojectionMatrix] = rectifyStereoImages(I1, I2, stereoParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('StereoCalibrationAndSceneReconstructionExample')
% showdemo('DepthEstimationFromStereoVideoExample')
